/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ControllerCompras;
import controller.ControllerComprasFornecedor;
import controller.ControllerComprasProdutos;
import controller.ControllerFornecedor;
import controller.ControllerProdutos;
import controller.ControllerProdutosComprasProdutos;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.ModelCompras;
import model.ModelComprasFornecedor;
import model.ModelComprasProdutos;
import model.ModelFornecedor;
import model.ModelProdutos;
import model.ModelProdutosComprasProdutos;
import util.BLDatas;

/**
 *
 * @author andre
 */
public class ViewCompras extends javax.swing.JFrame {
    ControllerFornecedor controllerFornecedor  = new ControllerFornecedor ();
    ModelFornecedor  modelFornecedor  = new ModelFornecedor ();
    ArrayList<ModelFornecedor > listaModelFornecedor  = new ArrayList<>();
    ControllerProdutos controllerProdutos = new ControllerProdutos();
    ModelProdutos modelProdutos = new ModelProdutos();
    ArrayList<ModelProdutos> listaModelProdutos = new ArrayList<>();
    ArrayList<ModelComprasFornecedor> listaModelComprasFornecedor = new ArrayList<>();
    ControllerComprasFornecedor controllerComprasFornecedor = new ControllerComprasFornecedor();
    ControllerCompras controllerCompras = new ControllerCompras();
    ModelCompras modelCompras = new ModelCompras();
    BLDatas bLdatas = new BLDatas();
    ControllerComprasProdutos controllerComprasProdutos = new ControllerComprasProdutos();
    ModelComprasProdutos modelComprasProdutos = new ModelComprasProdutos();
    ArrayList<ModelComprasProdutos> listaModelComprasProdutos = new ArrayList<>();
    ControllerProdutosComprasProdutos controllerProdutosComprasProdutos = new ControllerProdutosComprasProdutos();
    ModelProdutosComprasProdutos modelProdutosComprasProdutos = new ModelProdutosComprasProdutos();
    ArrayList<ModelProdutosComprasProdutos> listaModelProdutosComprasProdutos = new ArrayList<>();
    String alterarSalvar;

    /**
     * Creates new form ViewVendas
     */
    public ViewCompras() {
        initComponents();
        listarFornecedores();
        listarProdutos();
        setLocationRelativeTo(null);
        carregarCompras();
        preencherCodigoFornecedorPeloCombobox();
        preencherCodigoProdutoPeloCombobox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jtfCodigoFornecedor = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtfNumeroCompra = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtfCodigoProduto = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jtfQuantidade = new javax.swing.JTextField();
        jbAdicionar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtProdutosCompra = new javax.swing.JTable();
        jbCancelar = new javax.swing.JButton();
        jbNovo = new javax.swing.JButton();
        jbSalvar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jtfDesconto = new javax.swing.JTextField();
        jtfValorTotal = new javax.swing.JTextField();
        jbRemoverProdutos = new javax.swing.JButton();
        jcbNomeProduto = new componentes.UJComboBox();
        jcbNomeFornecedor = new componentes.UJComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jtfPesquisa = new javax.swing.JTextField();
        jbPesquisar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtCompras = new javax.swing.JTable();
        jbExcluir = new javax.swing.JButton();
        jbAlterar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MÓDULO DE COMPRAS");
        setResizable(false);

        jtfCodigoFornecedor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfCodigoFornecedorFocusLost(evt);
            }
        });

        jLabel1.setText("Código Fornecedor:");

        jLabel2.setText("Nome do Fornecedor:");

        jtfNumeroCompra.setBackground(new java.awt.Color(0, 204, 204));

        jLabel3.setText("Número da compra:");

        jLabel4.setText("Código do Produto:");

        jtfCodigoProduto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfCodigoProdutoFocusLost(evt);
            }
        });

        jLabel5.setText("Nome do Produto:");

        jLabel6.setText("Quantidade:");

        jbAdicionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/24x24/add.png"))); // NOI18N
        jbAdicionar.setText("Adicionar");
        jbAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdicionarActionPerformed(evt);
            }
        });

        jtProdutosCompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cód. Prod.", "Nome Produto", "Qtd", "Valor Un.", "Valor Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtProdutosCompra);
        if (jtProdutosCompra.getColumnModel().getColumnCount() > 0) {
            jtProdutosCompra.getColumnModel().getColumn(0).setMinWidth(90);
            jtProdutosCompra.getColumnModel().getColumn(0).setPreferredWidth(90);
            jtProdutosCompra.getColumnModel().getColumn(0).setMaxWidth(90);
            jtProdutosCompra.getColumnModel().getColumn(2).setMinWidth(70);
            jtProdutosCompra.getColumnModel().getColumn(2).setPreferredWidth(70);
            jtProdutosCompra.getColumnModel().getColumn(2).setMaxWidth(70);
            jtProdutosCompra.getColumnModel().getColumn(3).setMinWidth(90);
            jtProdutosCompra.getColumnModel().getColumn(3).setPreferredWidth(90);
            jtProdutosCompra.getColumnModel().getColumn(3).setMaxWidth(90);
            jtProdutosCompra.getColumnModel().getColumn(4).setMinWidth(90);
            jtProdutosCompra.getColumnModel().getColumn(4).setPreferredWidth(90);
            jtProdutosCompra.getColumnModel().getColumn(4).setMaxWidth(90);
        }

        jbCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/24x24/remove.png"))); // NOI18N
        jbCancelar.setText("Cancelar");

        jbNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/24x24/new.png"))); // NOI18N
        jbNovo.setText("Novo");
        jbNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoActionPerformed(evt);
            }
        });

        jbSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/24x24/save.png"))); // NOI18N
        jbSalvar.setText("Salvar");
        jbSalvar.setEnabled(false);
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jLabel7.setText("Desconto:");

        jLabel8.setText("Valor Total:");

        jtfDesconto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfDescontoFocusLost(evt);
            }
        });

        jbRemoverProdutos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/24x24/delete.png"))); // NOI18N
        jbRemoverProdutos.setText("Remover Produto");
        jbRemoverProdutos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoverProdutosActionPerformed(evt);
            }
        });

        jcbNomeProduto.setAutocompletar(true);
        jcbNomeProduto.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jcbNomeProdutoPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        jcbNomeFornecedor.setAutocompletar(true);
        jcbNomeFornecedor.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jcbNomeFornecedorPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfCodigoProduto)
                            .addComponent(jtfCodigoFornecedor)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jcbNomeFornecedor, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
                                .addComponent(jcbNomeProduto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfNumeroCompra)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel3))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jtfQuantidade)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbAdicionar))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jbRemoverProdutos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jtfValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfCodigoFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfNumeroCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbNomeFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfCodigoProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbAdicionar)
                    .addComponent(jcbNomeProduto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jtfValorTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfDesconto, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCancelar)
                    .addComponent(jbNovo)
                    .addComponent(jbSalvar)
                    .addComponent(jbRemoverProdutos))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Cadastro", jPanel1);

        jLabel9.setText("Pesquisa:");

        jbPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/24x24/zoom.png"))); // NOI18N
        jbPesquisar.setText("Pesquisar");

        jtCompras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome Fornecedor", "Data"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtCompras);
        if (jtCompras.getColumnModel().getColumnCount() > 0) {
            jtCompras.getColumnModel().getColumn(0).setMinWidth(90);
            jtCompras.getColumnModel().getColumn(0).setPreferredWidth(90);
            jtCompras.getColumnModel().getColumn(0).setMaxWidth(90);
            jtCompras.getColumnModel().getColumn(2).setMinWidth(110);
            jtCompras.getColumnModel().getColumn(2).setPreferredWidth(110);
            jtCompras.getColumnModel().getColumn(2).setMaxWidth(110);
        }

        jbExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/24x24/trash.png"))); // NOI18N
        jbExcluir.setText("Excluir");
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/24x24/edit.png"))); // NOI18N
        jbAlterar.setText("Alterar");
        jbAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAlterarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jtfPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbPesquisar))
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jbAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbPesquisar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbExcluir)
                    .addComponent(jbAlterar))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Consultar / Excluir / Alterar", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtfCodigoFornecedorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfCodigoFornecedorFocusLost
        // TODO add your handling code here:
        modelFornecedor = controllerFornecedor.getFornecedorController(Integer.parseInt(jtfCodigoFornecedor.getText()));
        jcbNomeFornecedor.setSelectedItem(modelFornecedor.getForNome());
    }//GEN-LAST:event_jtfCodigoFornecedorFocusLost

    private void jtfCodigoProdutoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfCodigoProdutoFocusLost
        // TODO add your handling code here:
        modelProdutos = controllerProdutos.retornarProdutoController(Integer.parseInt(jtfCodigoProduto.getText()));
        jcbNomeProduto.setSelectedItem(modelProdutos.getNome());
    }//GEN-LAST:event_jtfCodigoProdutoFocusLost

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        // TODO add your handling code here:
        int linha = jtCompras.getSelectedRow();
        int codigoCompra = (int) jtCompras.getValueAt(linha, 0);
        listaModelProdutos = new ArrayList<>();
        listaModelProdutosComprasProdutos = controllerProdutosComprasProdutos.getListaProdutosComprasProdutosController(codigoCompra);
        for (int i = 0; i < listaModelProdutosComprasProdutos.size(); i++) {
            modelProdutos = new ModelProdutos();
            modelProdutos.setID_produto(listaModelProdutosComprasProdutos.get(i).getModelProdutos().getID_produto());
            modelProdutos.setQuantidade_total((int) (listaModelProdutosComprasProdutos.get(i).getModelProdutos().getQuantidade_total()
                    + listaModelProdutosComprasProdutos.get(i).getModelComprasProdutos().getComProQuantidade()));
            listaModelProdutos.add(modelProdutos);
        }
        if (controllerProdutos.alterarEstoqueProdutoController(listaModelProdutos)) {
            controllerComprasProdutos.excluirComprasProdutosController(codigoCompra);
            if (controllerCompras.excluirComprasController(codigoCompra)) {
                JOptionPane.showMessageDialog(this, "Compra excluída com sucesso", "ATENÇÃO!", JOptionPane.WARNING_MESSAGE);
                this.carregarCompras();
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao excluir a compra", "ERRO!", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Erro ao excluir a compra", "ERRO!", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jbAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdicionarActionPerformed
        // TODO add your handling code here:
        if (jtfQuantidade.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Todos os campos devem ser preenchidos", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
        } else {
            controllerProdutos.retornarProdutoController(Integer.parseInt(jtfCodigoProduto.getText()));
            //Adicionar uma linha na tabela
            DefaultTableModel modelo = (DefaultTableModel) jtProdutosCompra.getModel();
            int cont = 0;
            double quantidade = 0;
            quantidade = Double.parseDouble(jtfQuantidade.getText());
            
            for (int i = 0; i < cont; i++) {
                modelo.setNumRows(0);
            }
            modelo.addRow(new Object[]{
                modelProdutos.getID_produto(),
                modelProdutos.getNome(),
                jtfQuantidade.getText(),
                modelProdutos.getValor_uni(),
                quantidade * modelProdutos.getValor_uni()
            });
            somarValorTotalProdutos();
        }

    }//GEN-LAST:event_jbAdicionarActionPerformed

    private void jtfDescontoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfDescontoFocusLost
        // TODO add your handling code here:
        somarValorTotalProdutos();
    }//GEN-LAST:event_jtfDescontoFocusLost

    private void jbNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoActionPerformed
        // TODO add your handling code here:
        jbSalvar.setEnabled(true);
        alterarSalvar = "salvar";
        limparFormulario();
    }//GEN-LAST:event_jbNovoActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        // TODO add your handling code here:
        int codigoCompra = 0, codigoProduto = 0;
        double desconto = 0;
        listaModelComprasProdutos = new ArrayList<>();
        if (jtfDesconto.getText().equals("")) {
            desconto = 0;
        } else {
            desconto = Double.parseDouble(jtfDesconto.getText());
        }
        if (!jtfNumeroCompra.getText().equals("")) {
            modelCompras.setIdCompra(Integer.parseInt(jtfNumeroCompra.getText()));
        }

        modelCompras.setFornecedor(Integer.parseInt(jtfCodigoFornecedor.getText()));
        try {
            modelCompras.setComDataCompra(bLdatas.converterDataParaDateUS(new java.util.Date(System.currentTimeMillis())));
        } catch (Exception e) {
        }
        modelCompras.setComValorLiquido(Double.parseDouble(jtfValorTotal.getText()));
        modelCompras.setComValorBruto(Double.parseDouble(jtfValorTotal.getText()) + desconto);
        modelCompras.setComDesconto(desconto);

        if (alterarSalvar.equals("salvar")) {
            //salvar venda
            codigoCompra = controllerCompras.salvarComprasController(modelCompras);
            if (codigoCompra > 0) {
                JOptionPane.showMessageDialog(this, "Compra cadastrada com sucesso!", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao cadastrar compra!", "ERRO", JOptionPane.ERROR_MESSAGE);
            }
            int cont = jtProdutosCompra.getRowCount();
            for (int i = 0; i < cont; i++) {
                codigoProduto = (int) jtProdutosCompra.getValueAt(i, 0);
                modelComprasProdutos = new ModelComprasProdutos();
                modelProdutos = new ModelProdutos();

                modelComprasProdutos.setProduto((int) jtProdutosCompra.getValueAt(i, 0));
                modelComprasProdutos.setCompras(codigoCompra);
                modelComprasProdutos.setComProValor((double) jtProdutosCompra.getValueAt(i, 3));
                modelComprasProdutos.setComProQuantidade(Integer.parseInt(jtProdutosCompra.getValueAt(i, 2).toString()));
                //produto
                modelProdutos.setID_produto(codigoProduto);
                modelProdutos.setQuantidade_total(controllerProdutos.retornarProdutoController(codigoProduto).getQuantidade_total()
                        + Integer.parseInt(jtProdutosCompra.getValueAt(i, 2).toString()));
                listaModelComprasProdutos.add(modelComprasProdutos);
                listaModelProdutos.add(modelProdutos);
            }
            //salvar os produtos da venda
            if (controllerComprasProdutos.salvarComprasProdutosController(listaModelComprasProdutos)) {
                //alterar o estoque de produtos
                controllerProdutos.alterarEstoqueProdutoController(listaModelProdutos);

//                JOptionPane.showMessageDialog(this, "Produtos da venda salvo com sucesso!", "ATENÇÃO", JOptionPane.WARNING_MESSAGE);
                carregarCompras();
                limparFormulario();
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao salvar os produtos!", "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            //altera
            //RETORNAR PARA O ESTOQUE E EXCLUIR PRODUTOS DA VENDA
            int linha = jtCompras.getSelectedRow();
            codigoCompra = (int) jtCompras.getValueAt(linha, 0);
            listaModelProdutos = new ArrayList<>();
            listaModelProdutosComprasProdutos = controllerProdutosComprasProdutos.getListaProdutosComprasProdutosController(codigoCompra);
            for (int i = 0; i < listaModelProdutosComprasProdutos.size(); i++) {
                modelProdutos = new ModelProdutos();
                modelProdutos.setID_produto(listaModelProdutosComprasProdutos.get(i).getModelProdutos().getID_produto());
                modelProdutos.setQuantidade_total((int) (listaModelProdutosComprasProdutos.get(i).getModelProdutos().getQuantidade_total()
                        - listaModelProdutosComprasProdutos.get(i).getModelComprasProdutos().getComProQuantidade()));
                listaModelProdutos.add(modelProdutos);
            }
            if (controllerProdutos.alterarEstoqueProdutoController(listaModelProdutos)) {
                if (controllerComprasProdutos.excluirComprasProdutosController(codigoCompra)) {
//                    JOptionPane.showMessageDialog(this, "Venda excluída com sucesso", "ATENÇÃO!", JOptionPane.WARNING_MESSAGE);
                    this.carregarCompras();
                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao excluir a compra", "ERRO!", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao excluir a compra", "ERRO!", JOptionPane.ERROR_MESSAGE);
            }
            //FIM ETORNAR PARA O ESTOQUE E EXCLUIR PRODUTOS DA VENDA

            if (controllerCompras.atualizarComprasController(modelCompras)) {
                JOptionPane.showMessageDialog(this, "Compra alterada com sucesso", "ATENÇÃO!", JOptionPane.WARNING_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao alterar a compra", "ERRO!", JOptionPane.ERROR_MESSAGE);
            }
            //adicionar produtos na lista para salvar
            int cont = jtProdutosCompra.getRowCount();
            for (int i = 0; i < cont; i++) {
                codigoProduto = (int) jtProdutosCompra.getValueAt(i, 0);
                modelComprasProdutos = new ModelComprasProdutos();
                modelProdutos = new ModelProdutos();

                modelComprasProdutos.setProduto((int) jtProdutosCompra.getValueAt(i, 0));
                modelComprasProdutos.setCompras(codigoCompra);
                modelComprasProdutos.setComProValor((double) jtProdutosCompra.getValueAt(i, 3));
                modelComprasProdutos.setComProQuantidade(Integer.parseInt(jtProdutosCompra.getValueAt(i, 2).toString()));
                //produto
                modelProdutos.setID_produto(codigoProduto);
                modelProdutos.setQuantidade_total(controllerProdutos.retornarProdutoController(codigoProduto).getQuantidade_total()
                        + Integer.parseInt(jtProdutosCompra.getValueAt(i, 2).toString()));
                listaModelComprasProdutos.add(modelComprasProdutos);
                listaModelProdutos.add(modelProdutos);
            }
            //salvar os produtos da venda
            if (controllerComprasProdutos.salvarComprasProdutosController(listaModelComprasProdutos)) {
//                JOptionPane.showMessageDialog(this, "Venda salva com sucesso", "ATENÇÃO!", JOptionPane.WARNING_MESSAGE);
                carregarCompras();
                limparFormulario();
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao salvar os produtos compra", "ERRO!", JOptionPane.ERROR_MESSAGE);
            }
        }
        jbSalvar.setEnabled(false);
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAlterarActionPerformed
        // TODO add your handling code here:
        //habilitar botão novo para alterar
        jbSalvar.setEnabled(true);
        alterarSalvar = "alterar";
        int linha = jtCompras.getSelectedRow();
        int codigoCompra = (int) jtCompras.getValueAt(linha, 0);
        listaModelProdutosComprasProdutos = controllerProdutosComprasProdutos.getListaProdutosComprasProdutosController(codigoCompra);
        DefaultTableModel modelo = (DefaultTableModel) jtProdutosCompra.getModel();
        modelo.setNumRows(0);
        for (int i = 0; i < listaModelProdutosComprasProdutos.size(); i++) {
            jtfNumeroCompra.setText(String.valueOf(listaModelProdutosComprasProdutos.get(i).getModelComprasProdutos().getCompras()));
            modelo.addRow(new Object[]{
                listaModelProdutosComprasProdutos.get(i).getModelProdutos().getID_produto(),
                listaModelProdutosComprasProdutos.get(i).getModelProdutos().getNome(),
                listaModelProdutosComprasProdutos.get(i).getModelComprasProdutos().getComProQuantidade(),
                listaModelProdutosComprasProdutos.get(i).getModelComprasProdutos().getComProValor(),
                listaModelProdutosComprasProdutos.get(i).getModelComprasProdutos().getComProQuantidade()
                * listaModelProdutosComprasProdutos.get(i).getModelComprasProdutos().getComProValor()
            });
        }
        somarValorTotalProdutos();
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_jbAlterarActionPerformed

    private void jbRemoverProdutosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoverProdutosActionPerformed
        // TODO add your handling code here:
        int linha = jtProdutosCompra.getSelectedRow();
        DefaultTableModel modelo = (DefaultTableModel) jtProdutosCompra.getModel();
        modelo.removeRow(linha);
        somarValorTotalProdutos();
    }//GEN-LAST:event_jbRemoverProdutosActionPerformed

    private void jcbNomeFornecedorPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jcbNomeFornecedorPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        if (jcbNomeFornecedor.isPopupVisible()) {
            preencherCodigoFornecedorPeloCombobox();
        }
    }//GEN-LAST:event_jcbNomeFornecedorPopupMenuWillBecomeInvisible

    private void jcbNomeProdutoPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jcbNomeProdutoPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        if (jcbNomeProduto.isVisible()) {
            preencherCodigoProdutoPeloCombobox();
        }
    }//GEN-LAST:event_jcbNomeProdutoPopupMenuWillBecomeInvisible

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewCompras().setVisible(true);
            }
        });
    }

    private void preencherCodigoProdutoPeloCombobox() {
        modelProdutos = controllerProdutos.retornarNomeProdutoController(jcbNomeProduto.getSelectedItem().toString());
        jtfCodigoProduto.setText(String.valueOf(modelProdutos.getID_produto()));
    }

    private void preencherCodigoFornecedorPeloCombobox() {
        modelFornecedor = controllerFornecedor.getFornecedorController(jcbNomeFornecedor.getSelectedItem().toString());
        jtfCodigoFornecedor.setText(String.valueOf(modelFornecedor.getIdFornecedor()));
    }

    /**
     * Preenche o combo box com todos os clientes
     */
    private void listarFornecedores() {
        listaModelFornecedor = controllerFornecedor.getListaFornecedorController();
        jcbNomeFornecedor.removeAllItems();
        for (int i = 0; i < listaModelFornecedor.size(); i++) {
            jcbNomeFornecedor.addItem(listaModelFornecedor.get(i).getForNome());
        }
    }

    /**
     * Preenche o combo box com todos os produtos
     */
    private void listarProdutos() {
        listaModelProdutos = controllerProdutos.retornarListaProdutoController();
        jcbNomeProduto.removeAllItems();
        for (int i = 0; i < listaModelProdutos.size(); i++) {
            jcbNomeProduto.addItem(listaModelProdutos.get(i).getNome());
        }
    }

    /**
     * Aplica desconto ao valor final da venda
     */
    private void aplicarDescontos() {
        try {
            jtfValorTotal.setText(String.valueOf(Double.parseDouble(jtfValorTotal.getText()) - Double.parseDouble(jtfDesconto.getText())));
        } catch (NumberFormatException e) {
        }
    }

    /**
     * Soma todos os produtos da venda
     */
    private void somarValorTotalProdutos() {
        double soma = 0, valor;
        int cont = jtProdutosCompra.getRowCount();
        for (int i = 0; i < cont; i++) {
            valor = (double) jtProdutosCompra.getValueAt(i, 4);
            soma = soma + valor;
        }
        jtfValorTotal.setText(String.valueOf(soma));
        aplicarDescontos();
    }

    private void carregarCompras() {
        DefaultTableModel modelo = (DefaultTableModel) jtCompras.getModel();
        listaModelComprasFornecedor = controllerComprasFornecedor.getListaComprasFornecedorController();
        int cont = listaModelComprasFornecedor.size();
        modelo.setNumRows(0);
        for (int i = 0; i < cont; i++) {
            modelo.addRow(new Object[]{
                listaModelComprasFornecedor.get(i).getModelCompras().getIdCompra(),
                listaModelComprasFornecedor.get(i).getModelFornecedor().getForNome(),
                listaModelComprasFornecedor.get(i).getModelCompras().getComDataCompra(),});
        }

    }

    /**
     * Limpar fomrulário de venda
     */
    private void limparFormulario() {
        jtfQuantidade.setText("");
        jtfDesconto.setText("");
        jtfValorTotal.setText("");
        DefaultTableModel modelo = (DefaultTableModel) jtProdutosCompra.getModel();
        modelo.setNumRows(0);
        modelProdutos = controllerProdutos.retornarProdutoController(Integer.parseInt(jtfCodigoProduto.getText()));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton jbAdicionar;
    private javax.swing.JButton jbAlterar;
    private javax.swing.JButton jbCancelar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbNovo;
    private javax.swing.JButton jbPesquisar;
    private javax.swing.JButton jbRemoverProdutos;
    private javax.swing.JButton jbSalvar;
    private componentes.UJComboBox jcbNomeFornecedor;
    private componentes.UJComboBox jcbNomeProduto;
    private javax.swing.JTable jtCompras;
    private javax.swing.JTable jtProdutosCompra;
    private javax.swing.JTextField jtfCodigoFornecedor;
    private javax.swing.JTextField jtfCodigoProduto;
    private javax.swing.JTextField jtfDesconto;
    private javax.swing.JTextField jtfNumeroCompra;
    private javax.swing.JTextField jtfPesquisa;
    private javax.swing.JTextField jtfQuantidade;
    private javax.swing.JTextField jtfValorTotal;
    // End of variables declaration//GEN-END:variables
}
